# 이 파일은 Cloud Build가 수행할 작업의 순서와 설정을 정의합니다.
availableSecrets:
  secretManager:
    - versionName: 'projects/585123519445/secrets/SECRET_KEY/versions/latest'
      env: 'SECRET_KEY'
    - versionName: 'projects/585123519445/secrets/DB_NAME/versions/latest'
      env: 'DB_NAME'
    - versionName: 'projects/585123519445/secrets/DB_USER/versions/latest'
      env: 'DB_USER'
    - versionName: 'projects/585123519445/secrets/DB_PASSWORD/versions/latest'
      env: 'DB_PASSWORD'
    - versionName: 'projects/585123519445/secrets/DB_HOST/versions/latest'
      env: 'DB_HOST'

steps:
# --- 1단계 & 2단계: 이미지 빌드 및 푸시 ---
- name: 'gcr.io/cloud-builders/docker'
  id: 'Build Docker Image'
  args: [ 'build', '-t', '${_SERVICE_REGION}-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}/${_SERVICE_NAME}:$COMMIT_SHA', '.' ]

- name: 'gcr.io/cloud-builders/docker'
  id: 'Push Docker Image'
  args: [ 'push', '${_SERVICE_REGION}-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}/${_SERVICE_NAME}:$COMMIT_SHA' ]

# --- 3단계: 데이터베이스 마이그레이션 실행 ---
- name: 'gcr.io/google-appengine/exec-wrapper'
  id: 'Run Database Migrations'
  entrypoint: 'bash'
  secretEnv: ['SECRET_KEY', 'DB_NAME', 'DB_USER', 'DB_PASSWORD', 'DB_HOST']
  args:
    - '-c'
    - |
      # 아래 'test -n' 명령어는 Linter에게 시크릿 변수를 명시적으로 사용하고 있음을 알려줍니다.
      # 이 검사를 통과한 후, 실제 마이그레이션 명령어가 실행됩니다.
      test -n "$$SECRET_KEY" && test -n "$$DB_NAME" && test -n "$$DB_USER" && test -n "$$DB_PASSWORD" && test -n "$$DB_HOST"

      # exec-wrapper를 사용하여 마이그레이션을 실행합니다.
      # Django 애플리케이션은 secretEnv를 통해 주입된 환경 변수를 사용하여 DB에 연결합니다.
      /buildstep/execute.sh \
        -i '${_SERVICE_REGION}-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}/${_SERVICE_NAME}:$COMMIT_SHA' \
        -s '$PROJECT_ID:${_SERVICE_REGION}:${_DB_INSTANCE_NAME}' \
        -e SECRET_KEY="$$SECRET_KEY" \
        -e DB_NAME="$$DB_NAME" \
        -e DB_USER="$$DB_USER" \
        -e DB_PASSWORD="$$DB_PASSWORD" \
        -e DB_HOST="$$DB_HOST" \
        -- \
        python manage.py migrate --no-input

# --- 4단계: Cloud Run 배포 ---
- name: 'gcr.io/google-cloud-sdk/gcloud'
  id: 'Deploy to Cloud Run'
  args:
    - 'run'
    - 'deploy'
    - '${_SERVICE_NAME}'
    - '--image=${_SERVICE_REGION}-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}/${_SERVICE_NAME}:$COMMIT_SHA'
    - '--region=${_SERVICE_REGION}'
    - '--platform=managed'
    - '--quiet'
    - '--add-cloudsql-instances=$PROJECT_ID:${_SERVICE_REGION}:${_DB_INSTANCE_NAME}'
    - '--set-secrets=SECRET_KEY=SECRET_KEY:latest,DB_NAME=DB_NAME:latest,DB_USER=DB_USER:latest,DB_PASSWORD=DB_PASSWORD:latest,DB_HOST=DB_HOST:latest'

images:
- '${_SERVICE_REGION}-docker.pkg.dev/$PROJECT_ID/${_SERVICE_NAME}/${_SERVICE_NAME}:$COMMIT_SHA'
substitutions:
  _SERVICE_NAME: 'comp-star-repo'
  _SERVICE_REGION: 'asia-northeast3'
  _DB_INSTANCE_NAME: 'comp-star-db-instance'
options:
  logging: CLOUD_LOGGING_ONLY